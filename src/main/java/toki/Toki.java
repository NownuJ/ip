package toki;

import toki.command.Command;
import toki.task.TaskList;

/**
 * Entry point of the Toki application.
 * <p>
 * Wires together the {@link Storage}, {@link Ui}, {@link Parser}, and {@link TaskList},
 * loads previously saved tasks (if any), and runs the read&ndash;eval&ndash;print loop that
 * accepts user commands and executes them until exit.
 */

public class Toki {

    /** Deals with loading tasks from the file and saving tasks to the file. */
    private Storage storage;

    /** The in-memory task list containing all user tasks. */
    private TaskList tasks;

    /** Handles interactions with the user (input and output). */
    private Ui ui;

    /**
     * Constructs a new instance of the Toki application.
     *
     * <p>Initialises the user interface, storage, and task list. Attempts to load
     * existing tasks from the specified file. If loading fails due to a
     * {@link TokiException}, an empty task list is created instead and a loading
     * error message is shown to the user.</p>
     *
     * @param filePath the file path to the storage file where tasks are saved
     */
    public Toki(String filePath) {
        ui = new Ui();
        storage = new Storage(filePath);
        try {
            tasks = new TaskList(storage.load());
        } catch (TokiException e) {
            ui.showLoadingError();
            tasks = new TaskList();
        }

    }

    /**
     * Processes user input and returns Toki's response as a string.
     *
     * <p>This method parses the given input into a {@link Command}, executes it,
     * and returns the output generated by the command. If a {@link TokiException}
     * occurs during parsing or execution, the error message from the exception
     * is returned instead.</p>
     *
     * @param input the raw user input entered into Toki
     * @return the response string generated by executing the corresponding command
     * @throws TokiException if an unexpected error occurs while processing the input
     */
    public String getResponse(String input) throws TokiException {
        try {
            Command c = Parser.parse(input);
            assert c != null : "Parser should always return a Command object";
            return c.execute(tasks, ui, storage);
        } catch (TokiException e) {
            return e.getMessage();
        }
    }

}

